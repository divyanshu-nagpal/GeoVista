import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { AI_PROMPT, SelectBudgetOptions, SelectTravelList } from '@/constants/options';
import { toast } from '@/hooks/use-toast';
import { chatSession } from '@/service/AIModal';
import React, { useEffect, useState } from 'react';
import GooglePlacesAutocomplete from 'react-google-places-autocomplete';
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import { doc, setDoc } from "firebase/firestore"; 
import { db } from '@/service/firebaseConfig';
import { useNavigate } from 'react-router-dom';


function CreateTrip() {
  const [place, setPlace] = useState();
  const [formData, setFormData] = useState([]);

  const[loading,setLoading]=useState(false);

  const navigate=useNavigate();

  const handleInputChange = (name, value) => {
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  useEffect(() => {
    console.log(formData);
  }, [formData]);

  // const login=useGoogleLogin({
  //   onSuccess: (codeResp) => GetUserProfile(codeResp),
  //   // onSuccess:(codeResp)=>console.log(codeResp),
  //   onError:(error)=>console.log(error)
  // })

  const OnGenerateTrip = async() => {

    // const user = localStorage.getItem('user');

    // if(!user){
    //   setOpenDialog(true)
    //   return;
    // }


    // Check for missing details
    if (!formData?.noOfDays || !formData?.location || !formData?.budget || !formData?.traveler) {
      toast({
        title: "Missing Details",
        description: "Please fill all the details to generate a trip.",
        className: "text-black bg-white border border-orange-500 shadow-lg", // Customize color here
      });
      return;
    }
  
    // Check for number of days
    if (formData?.noOfDays > 10) {
      toast({
        title: "Trip Duration Too Long",
        description: "Please select a duration shorter than 10 days to proceed.",
        className: "text-black bg-white border border-orange-500 shadow-lg", // Customize color for error
      });
      return;
    }
    // Check for number of days
    if (formData?.noOfDays < 1) {
      toast({
        title: "Invalid Trip Duration",
        description: "Trip duration must be at least 1 day. Please adjust your selection.",
        className: "text-black bg-white border border-red-500 shadow-lg", // Customize color for error
      });
      return;
    }
    
    setLoading(true);
    const FINAL_PROMPT=AI_PROMPT
    .replace('{place}',formData?.location?.label)
    .replace('{totalDays}',formData?.noOfDays)
    .replace('{traveler}',formData?.traveler)
    .replace('{budget}',formData?.budget)
    .replace('{totalDays}',formData?.noOfDays)

    // If all conditions are satisfied
    // console.log(FINAL_PROMPT);

    const result=await chatSession.sendMessage(FINAL_PROMPT);
    console.log(result?.response?.text());
    setLoading(false);
    SaveAiTrip(result?.response?.text())
  };
  
  
  const SaveAiTrip=async(TripData)=>{
    setLoading(true);
    const user=JSON.parse( localStorage.getItem('user'));
    const docId=Date.now().toString();
    await setDoc(doc(db, "AITrips", docId), {
      userSelection:formData,
      tripData: JSON.parse(TripData),
      userEmail:user?.email,
      id:docId
    });
    setLoading(false);
    navigate('/view-trip/'+docId);
    window.location.reload();
    console.log("User Selection (formData):", formData);
  }

  // const GetUserProfile = async (tokenInfo) => {
  //   const resp = await axios.get(
  //     `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${tokenInfo?.access_token}`,
  //     {
  //       headers: {
  //         Authorization:`Bearer ${tokenInfo?.access_token}`,
  //         Accept: "Application/json",
  //       },
  //     }
  //   );
  //   console.log(resp);
  //   localStorage.setItem("user", JSON.stringify(resp.data));
  //   setOpenDialog(false);
  //   OnGenerateTrip();
  // };


  return (
    <div className="sm:px-10 md:px-32 lg:px-40 xl:px-56 px-6 mt-10 ">
      {/* Header Section */}
      <h2 className="font-extrabold text-4xl text-gray-800 text-center">
        Plan Your Perfect Trip
      </h2>
      <p className="mt-3 text-gray-600 text-center text-lg">
        Share your preferences, and we'll create a personalized itinerary just for you.
      </p>
  
      {/* Form Sections */}
      <div className="mt-16 flex flex-col gap-14">
        {/* Destination Section */}
        <div>
          <h3 className="text-lg font-medium text-gray-700 mb-3">What is your destination of choice?</h3>
          <GooglePlacesAutocomplete
            apiKey={import.meta.env.VITE_GOOGLE_PLACE_API_KEY}
            selectProps={{
              place,
              onChange: (v) => {
                setPlace(v);
                handleInputChange('location', v);
              },
              placeholder: 'Search for a location...',
            }}
          />
        </div>
  
        {/* Number of Days Section */}
        <div>
          <h3 className="text-lg font-medium text-gray-700 mb-3">How many days are you planning your trip?</h3>
          <Input
            placeholder="Enter number of days (e.g., 3)"
            type="number"
            onChange={(e) => handleInputChange('noOfDays', e.target.value)}
            onWheel={(e) => e.target.blur()} // Disable number scrolling
            className="border-gray-300 focus:ring-orange-500 focus:border-orange-500"
          />
        </div>
  
        {/* Budget Section */}
        <div>
          <h3 className="text-lg font-medium text-gray-700 mb-3">What is Your Budget?</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-4">
            {SelectBudgetOptions.map((item, index) => (
              <div
                key={index}
                onClick={() => handleInputChange('budget', item.title)}
                className={`p-5 border cursor-pointer rounded-xl shadow-sm hover:shadow-lg hover:border-orange-500 transition
                  ${formData?.budget === item.title ? 'border-orange-500 shadow-md' : 'border-gray-200'}`}
              >
                <h2 className="text-3xl mb-2">{item.icon}</h2>
                <h3 className="font-semibold text-lg">{item.title}</h3>
                <p className="text-sm text-gray-500">{item.desc}</p>
              </div>
            ))}
          </div>
        </div>
  
        {/* Traveler Section */}
        <div>
          <h3 className="text-lg font-medium text-gray-700 mb-3">Who do you plan to travel with?</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-4">
            {SelectTravelList.map((item, index) => (
              <div
                key={index}
                onClick={() => handleInputChange('traveler', item.people)}
                className={`p-5 border cursor-pointer rounded-xl shadow-sm hover:shadow-lg hover:border-orange-500 transition
                  ${formData?.traveler === item.people ? 'border-orange-500 shadow-md' : 'border-gray-200'}`}
              >
                <h2 className="text-3xl mb-2">{item.icon}</h2>
                <h3 className="font-semibold text-lg">{item.title}</h3>
                <p className="text-sm text-gray-500">{item.desc}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
  
      {/* Generate Button */}
      <div className="mt-10 flex justify-center">
        <Button
          disabled={loading}
          onClick={OnGenerateTrip}
          className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 rounded-lg text-lg shadow-md"
        >
          {loading ? (
            <AiOutlineLoading3Quarters className="h-7 w-7 animate-spin" />
          ) : (
            'Generate Trip'
          )}
        </Button>
      </div>
      <br/><br/>
    </div>
    
  );
  
}

export default CreateTrip;
